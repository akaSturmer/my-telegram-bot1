import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –¢–í–û–ò –î–ê–ù–ù–´–ï (—É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã) ===
TELEGRAM_TOKEN = "7426748624:AAGHSRTPl3mkK6rVXN86lbaQN5Y1mCv17YE"
GROQ_API_KEY = "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"

# === –í–°–¢–†–û–ï–ù–ù–ê–Ø –ë–ê–ó–ê –¢–û–í–ê–†–û–í (–≤–º–µ—Å—Ç–æ CSV) ===
PRODUCTS = [
    {
        "–ò–º—è": "–ö–ª–µ–π-–ø–µ–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –¢–ï–•–ù–û–ù–ò–ö–û–õ–¨ –¥–ª—è –∫–ª–∞–¥–∫–∏ –±–ª–æ–∫–æ–≤ 700 –º–ª",
        "–ê—Ä—Ç–∏–∫—É–ª": "303000000",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–ö–ª–µ–π-–¶–µ–º–µ–Ω—Ç –¢–ï–•–ù–û–ù–ò–ö–û–õ–¨ MASTER ‚Äî –æ–¥–Ω–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω–æ–≤—ã–π –∫–ª–µ–π. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–ª–∞–¥–∫–∏ –∏–∑ –≥–∞–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö, –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤. –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: –æ—Ç -10¬∞C –¥–æ +35¬∞C.",
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è": "–±–ª–æ–∫–∏, –≥–∞–∑–æ–±–µ—Ç–æ–Ω, –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∏, –∫–µ—Ä–∞–º–∏–∫–∞, —Å—Ç–µ–Ω—ã",
        "–°—Å—ã–ª–∫–∞": "https://baucenter.ru/product/kley-pena-professionalnaya-tekhnonikol-dlya-kladki-blokov-700-ml-ctg-36829-36841-38020-303000000/"
    }
    # –î–æ–±–∞–≤–ª—è–π —Å—é–¥–∞ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–∞–∫–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É
]

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–∫–ª–µ–∏—Ç—å, –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ."
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()

    # –ü–æ–∏—Å–∫ –ø–æ "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è"
    matches = []
    for p in PRODUCTS:
        suitable = p.get("–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è", "").lower()
        for keyword in suitable.split(","):
            if keyword.strip() in user_text:
                matches.append(p)
                break

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    if matches:
        response = "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for p in matches:
            name = p["–ò–º—è"]
            sku = p["–ê—Ä—Ç–∏–∫—É–ª"]
            link = p["–°—Å—ã–ª–∫–∞"]
            response += f"üîπ <a href='{link}'>{name}</a> (–∞—Ä—Ç–∏–∫—É–ª: {sku})\n"
        response += "\n–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å, –ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ –æ–Ω –¥–ª—è —á–µ–≥–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ."
        await update.message.reply_html(response)
    else:
        # –°–ø—Ä–æ—Å–∏–º —É –ò–ò
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{user_text}'. –í–æ—Ç –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã: {PRODUCTS}. –ü–æ–¥—Å–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏."
        ai_response = get_ai_response(prompt)
        await update.message.reply_text(ai_response)

# === –ó–∞–ø—Ä–æ—Å –∫ Groq (–ò–ò) ===
def get_ai_response(prompt):
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama3-8b-8192",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 200
    }
    try:
        r = requests.post(url, json=data, headers=headers)
        if r.status_code == 200:
            return r.json()["choices"][0]["message"]["content"]
        else:
            return "–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()