import requests
import csv
import io
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# === –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï ===
TELEGRAM_TOKEN = "7426748624:AAGHSRTPl3mkK6rVXN86lbaQN5Y1mCv17YE"
GROQ_API_KEY = "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"
GOOGLE_SHEETS_CSV_URL = "https://drive.google.com/file/d/1-0lkI-amiiz8TDcMt0TiVqVBkD73dV_B/view?usp=drivesdk"

# === –ó–ê–ì–†–£–ó–ö–ê –¢–û–í–ê–†–û–í –ò–ó GOOGLE –¢–ê–ë–õ–ò–¶–´ ===
def load_products():
    try:
        r = requests.get(GOOGLE_SHEETS_CSV_URL)
        r.encoding = 'utf-8'
        reader = csv.DictReader(io.StringIO(r.text))
        return list(reader)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:", e)
        return []

# === –ö–û–ú–ê–ù–î–ê /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–∫–ª–µ–∏—Ç—å, –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ."
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.lower()
    products = load_products()

    if not products:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    # –ü–æ–∏—Å–∫ –ø–æ "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è"
    matches = []
    for p in products:
        suitable = p.get("–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è", "").lower()
        for keyword in suitable.split(","):
            if keyword.strip() in user_text:
                matches.append(p)
                break

    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º —Ç–æ–≤–∞—Ä—ã
    if matches:
        response = "–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã:\n\n"
        for p in matches:
            name = p["–ò–º—è"]
            sku = p["–ê—Ä—Ç–∏–∫—É–ª"]
            link = p["–°—Å—ã–ª–∫–∞"]
            response += f"üîπ <a href='{link}'>{name}</a> (–∞—Ä—Ç–∏–∫—É–ª: {sku})\n"
        response += "\n–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å, –ø–æ–¥–æ–π–¥—ë—Ç –ª–∏ –æ–Ω –¥–ª—è —á–µ–≥–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ."
        await update.message.reply_html(response)
    else:
        # –°–ø—Ä–æ—Å–∏–º —É –ò–ò
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '{user_text}'. –í–æ—Ç —Ç–æ–≤–∞—Ä—ã: {products}. –ü–æ–¥—Å–∫–∞–∂–∏, —á—Ç–æ –ø–æ–¥–æ–π–¥—ë—Ç."
        ai_response = get_ai_response(prompt)
        await update.message.reply_text(ai_response)

# === –ó–ê–ü–†–û–° –ö GROQ (–ò–ò) ===
def get_ai_response(prompt):
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "llama3-8b-8192",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 200
    }
    try:
        r = requests.post(url, json=data, headers=headers)
        if r.status_code == 200:
            return r.json()["choices"][0]["message"]["content"]
        else:
            return "–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}"

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
